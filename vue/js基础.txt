待解决问题：
js 异步任务
箭头函数this指针

1.
<script src="myScript.js"></script>
<script src="https://www.w3school.com.cn/js/myScript1.js"></script>

注释：外部脚本不能包含 <script> 标签。
已缓存的 JavaScript 文件可加速页面加载，分离了 HTML 和代码，使 HTML 和 JavaScript 更易于阅读和维护
function myFunction() {
   document.getElementById("demo").innerHTML = "段落被更改。";
}

2.JavaScript 能够以不同方式“显示”数据：

使用 window.alert() 写入警告框
使用 document.write() 写入 HTML 输出
提示：document.write() 方法仅用于测试。注意：在 HTML 文档完全加载后使用 document.write() 将删除所有已有的 HTML ：
使用 innerHTML 写入 HTML 元素
<p id="demo"></p>
<script>
 document.getElementById("demo").innerHTML = 5 + 6;
</script>
使用 console.log() 写入浏览器控制台

3.分号分隔 JavaScript 语句。如果有分号分隔，允许在同一行写多条语句：
提示：以分号结束语句不是必需的，但我们仍然强烈建议您这么做。
a = 5; b = 6; c = a + b;

a = 5;
b = 6;
c = a + b;

var x, y, z;	// 语句 1
x = 22;		// 语句 2
y = 11;		// 语句 3
z = x + y;	// 语句 4

JavaScript 会忽略多个空格。您可以向脚本添加空格，以增强可读性
var person = "Bill";
var person="Bill"; 
为了达到最佳的可读性，程序员们常常喜欢把代码行控制在 80 个字符以内。
document.getElementById("demo").innerHTML =
 "Hello Kitty.";

 JavaScript 代码块，JavaScript 语句可以用花括号（{...}）组合在代码块中。
 function myFunction() {
    document.getElementById("demo").innerHTML = "Hello Kitty.";
    document.getElementById("myDIV").innerHTML = "How are you?";
}

JavaScript 关键词
debugger：停止执行 JavaScript，并调用调试函数（如果可用）。
var：声明变量。	
try ... catch	对语句块实现错误处理。
function	声明函数。

4.
var x, y;	// 如何声明变量
x = 7; y = 8;	// 如何赋值
z = x + y;	// 如何计算值
双斜杠 // 或 /* 与 */ 之间的代码被视为注释。
在 JavaScript 中，首字符必须是字母、下划线（-）或美元符号（$）
JavaScript 对大小写敏感
所有 JavaScript 标识符对大小写敏感。
变量 lastName 和 lastname，是两个不同的变量。

JavaScript 与驼峰式大小写
FirstName, LastName, MasterCard, InterCity.
first_name, last_name, master_card, inter_city.
注释：JavaScript 中不能使用连字符。它是为减法预留的

5.
var carName;
声明之后，变量是没有值的。（技术上，它的值是 undefined。）
您可以在一条语句中声明许多变量。
var person = "Bill Gates", carName = "porsche", price = 15000;
声明可横跨多行：
var person = "Bill Gates",
carName = "porsche",
price = 15000;

6.
var carName = "porsche";
var carName; 
重复声明 JavaScript 变量
如果再次声明某个 JavaScript 变量，将不会丢它的值。
在这两条语句执行后，变量 carName 的值仍然是 "porsche"：

7.
var x = "8" + 3 + 5; //835
var x = 3 + 5 + "8";//88

8.
1.全局（在函数之外）声明的变量拥有全局作用域。
var carName = "porsche";
// 此处的代码可以使用 carName
function myFunction() {
  // 此处的代码也可以使用 carName
}

2.局部（函数内）声明的变量拥有函数作用域。
// 此处的代码不可以使用 carName
function myFunction() {
  var carName = "porsche";
  // code here CAN use carName
}
// 此处的代码不可以使用 carName

3.局部变量只能在它们被声明的函数内访问。
通过 var 关键词声明的变量没有块作用域。
在块 {} 内声明的变量可以从块之外进行访问。
{ 
  var x = 10; 
}
// 此处可以使用 x

4.可以使用 let 关键词声明拥有块作用域的变量。
在块 {} 内声明的变量无法从块外访问：
{ 
  let x = 10;
}
// 此处不可以使用 x

5.重新声明变量
使用 var 关键字重新声明变量会带来问题。
在块中重新声明变量也将重新声明块外的变量：
	var x = 10;
	// 此处 x 为 10
	{ 
	  var x = 6;
	  // 此处 x 为 6
	}
	// 此处 x 为 6
使用 let 关键字重新声明变量可以解决这个问题。
	var x = 10;
	// 此处 x 为 10
	{ 
	  let x = 6;
	  // 此处 x 为 6
	}
	// 此处 x 为 10
6.场景实战
6.1：循环作用域
	var i = 7;
	for (var i = 0; i < 10; i++) {
	  // 一些语句
	}
	// 此处，i 为 10
在循环中使用 let：如果在循环中用 let 声明了变量 i，那么只有在循环内，变量 i 才是可见的
	let i = 7;
	for (let i = 0; i < 10; i++) {
	  // 一些语句
	}
	// 此处 i 为 7

6.2
在函数内声明变量时，使用 var 和 let 很相似。
	function myFunction() {
	  var carName = "porsche";   // 函数作用域
	}
	function myFunction() {
	  let carName = "porsche";   // 函数作用域
	}
全局作用域
如果在块外声明声明，那么 var 和 let 也很相似。
它们都拥有全局作用域：
	var x = 10;       // 全局作用域
	let y = 6;       // 全局作用域

6.3
通过 var 关键词定义的全局变量属于 window 对象：
	var carName = "porsche";
	// 此处的代码可使用 window.carName
通过 let 关键词定义的全局变量不属于 window 对象：
	let carName = "porsche";
	// 此处的代码不可使用 window.carName
6.4
重新声明
允许在程序的任何位置使用 var 重新声明 JavaScript 变量：
	var x = 10;
	// 现在，x 为 10
	var x = 6;
	// 现在，x 为 6
6.4.1在相同的作用域，或在相同的块中，通过 let 重新声明一个 var 变量是不允许的
	var x = 10;       // 允许
	let x = 6;       // 不允许

	{
	  var x = 10;   // 允许
	  let x = 6;   // 不允许
	}
6.4.2在相同的作用域，或在相同的块中，通过 let 重新声明一个 let 变量是不允许的：
	let x = 10;       // 允许
	let x = 6;       // 不允许

	{
	  let x = 10;   // 允许
	  let x = 6;   // 不允许
	}
6.4.3在相同的作用域，或在相同的块中，通过 var 重新声明一个 let 变量是不允许的：
	let x = 10;       // 允许
	var x = 6;       // 不允许

	{
	  let x = 10;   // 允许
	  var x = 6;   // 不允许
	}
6.4.4
在不同的作用域或块中，通过 let 重新声明变量是允许的：
	let x = 6;       // 允许

	{
	  let x = 7;   // 允许
	}

	{
	  let x = 8;   // 允许
	}
6.5
通过 var 声明的变量会提升到顶端。如果您不了解什么是提升（Hoisting）
	// 在此处，您可以使用 carName
	var carName;
通过 let 定义的变量不会被提升到顶端。
在声明 let 变量之前就使用它会导致 ReferenceError。
	// 在此处，您不可以使用 carName
	let carName;

7.
通过 const 定义的变量与 let 变量类似，但不能重新赋值：
	const PI = 3.141592653589793;
	PI = 3.14;      // 会出错
	PI = PI + 10;   // 也会出错

	var x = 10;
	// 此处，x 为 10
	{ 
	  const x = 6;
	  // 此处，x 为 6
	}
	// 此处，x 为 10
JavaScript const 变量必须在声明时赋值：
	不正确
		const PI;
		PI = 3.14159265359;
// 您可以创建 const 对象：
const car = {type:"porsche", model:"911", color:"Black"};
// 您可以更改属性：
car.color = "White";
// 您可以添加属性：
car.owner = "Bill";

const car = {type:"porsche", model:"911", color:"Black"};
car = {type:"Volvo", model:"XC60", color:"White"};    // ERROR

var x = 2;         // 允许
const x = 2;       // 不允许
{
  let x = 2;     // 允许
  const x = 2;   // 不允许
}
通过 const 定义的变量不会被提升到顶端。const 变量不能在声明之前使用：
	carName = "Volvo";    // 您不可以在此处使用 carName
	const carName = "Volvo";

8.
JavaScript 数据类型
JavaScript 中有五种可包含值的数据类型：
	字符串（string）
	数字（number）
	布尔（boolean）
	对象（object）
	函数（function）
有三种对象类型：
	对象（Object）
	日期（Date）
	数组（Array）
同时有两种不能包含值的数据类型：
	null
	undefined

typeof 运算符,typeof 运算符不是变量。它属于运算符。运算符（比如 + - * /）没有数据类型。
您可以使用 typeof 运算符来确定 JavaScript 变量的数据类型。
实例
typeof "Bill"                 // 返回 "string"
typeof 3.14                   // 返回 "number"
typeof NaN                    // 返回 "number"
typeof false                  // 返回 "boolean"
typeof [1,2,3,4]              // 返回 "object"
typeof {name:'Bill', age:62}  // 返回 "object"
typeof new Date()             // 返回 "object"
typeof function () {}         // 返回 "function"
typeof myCar                  // 返回 "undefined" *
typeof null                   // 返回 "object"
请注意：
NaN 的数据类型是数值
数组的数据类型是对象
日期的数据类型是对象
null 的数据类型是对象
未定义变量的数据类型是 undefined
尚未赋值的变量的数据类型也是 undefined
您无法使用 typeof 去判断 JavaScript 对象是否是数组（或日期）。
typeof 始终会返回字符串（包含运算数的类型）。
9.
constructor 属性
constructor 属性返回所有 JavaScript 变量的构造器函数。
"Bill".constructor                 // 返回 "function String()  { [native code] }"
(3.14).constructor                 // 返回 "function Number()  { [native code] }"
false.constructor                  // 返回 "function Boolean() { [native code] }"
[1,2,3,4].constructor              // 返回 "function Array()   { [native code] }"
{name:'Bill', age:62}.constructor  // 返回" function Object()  { [native code] }"
new Date().constructor             // 返回 "function Date()    { [native code] }"
function () {}.constructor         // 返回 "function Function(){ [native code] }"