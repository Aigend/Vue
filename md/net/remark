    可用的预定义文件模板变量为：
    $ {PROJECT_NAME} - 当前项目的名称。
    $ {NAME} - 在文件创建过程中在“新建文件”对话框中指定的新文件的名称。
    $ {USER} - 当前用户的登录名。
    $ {DATE} - 当前的系统日期。
    $ {TIME} - 当前系统时间。
    $ {YEAR} - 今年。
    $ {MONTH} - 当月。
    $ {DAY} - 当月的当天。
    $ {HOUR} - 目前的小时。
    $ {MINUTE} - 当前分钟。
    $ {PRODUCT_NAME} - 将在其中创建文件的IDE的名称。
    $ {MONTH_NAME_SHORT} - 月份名称的前3个字母。 示例：1月，2月等
    $ {MONTH_NAME_FULL} - 一个月的全名。 示例：1月，2月等

-------------------------------------------------------------
python2.7安装pip命令
python -m pip install --upgrade pip --force-reinstall

-------------------------------------------------------------
print(str.strip(" ,\r"))#'c.biancheng.net \t\n'
-------------------------------------------------------------
因为python2.x的默认编码是ascii，而代码中可能由utf-8的字符导致，解决方法是设置utf-8。
找到出错的文件，在import后增加下面几行：
#!coding=utf-8
import sys
if sys.getdefaultencoding() != 'utf-8':
    reload(sys)
    sys.setdefaultencoding('utf-8')
# len(str1.encode('gbk'))
# len(str1.encode())
-------------------------------------------------------------
 Python 标准库中，以__开头和结尾的方法都是私有的，不能在类的外部调用
dir() 查看字符串类型（str）支持的所有方法:dir(str)
使用 help() 查看 str 类型中 lower() 函数的用法:help(str.lower)
注意，使用 help() 查看某个函数的用法时，函数名后边不能带括号，例如将上面的命令写作help(str.lower())就是错误的
-------------------------------------------------------------
if、else 后面的代码一定要缩进，否则就不能构成 if、else 的执行体
缩进 1 个 Tab 键的位置，或者缩进 4 个空格；它们两者其实是等价的
if age < 18 :
    print("你还未成年，建议在家人陪同下使用该软件！")
      print("未成年人如果得到了家长的同意，请忽略以上提示。")  #缩进量不对
SyntaxError: unexpected indent
语法错误：意外的缩进

proof = int(input("输入驾驶员每 100ml 血液酒精的含量："))
if proof < 20:
    print("驾驶员不构成酒驾")
else:
    if proof < 80:
        print("驾驶员已构成酒驾")
    else:
        print("驾驶员已构成醉驾")
-------------------------------------------------------------
空语句 pass。pass 是 Python 中的关键字，用来让解释器跳过此处，什么都不做
age = int( input("请输入你的年龄：") )
if age < 12 :
    print("婴幼儿")
elif age >= 12 and age < 18:
    print("青少年")
elif age >= 18 and age < 30:
    print("成年人")
elif age >= 30 and age < 50:
    pass
else:
    print("老年人")
-------------------------------------------------------------
assert 表达式
mathmark = int(input())
#断言数学考试分数是否位于正常范围内
assert 0 <= mathmark <= 100
#只有当 mathmark 位于 [0,100]范围内，程序才会继续执行
print("数学考试分数为：",mathmark)
-------------------------------------------------------------
eval()方法：把字符串数字转成数字类型





-------------------------------------------------------------